"use strict";
var startPoint;
Page({
    data: {
        loginStatus: false,
        taskCount: 0,
        buttonTop: 0,
        buttonLeft: 0,
        windowHeight: 0,
        windowWidth: 0
    },
    bindViewTap: function () {
        wx.navigateTo({
            url: '../logs/logs',
        });
    },
    onLoad: function () {
        this.getLoginStatus();
        var that = this;
        wx.getSystemInfo({
            success: function (res) {
                console.log(res);
                console.log('height=' + res.windowHeight);
                console.log('width=' + res.windowWidth);
                that.setData({
                    windowHeight: res.windowHeight,
                    windowWidth: res.windowWidth,
                    buttonTop: res.windowHeight * 0.8
                });
            }
        });
    },
    onShow: function () {
        this.getLoginStatus();
    },
    getLoginStatus: function () {
        wx.getStorage({
            key: 'loginStatus',
            success: this.onLoginStatusGetSuccess,
            fail: this.onLoginStatusGetFail,
        });
    },
    onLoginStatusGetSuccess: function (e) {
        console.log('获取登录状态成功回调', e);
        this.setData({
            loginStatus: e.data
        });
    },
    onLoginStatusGetFail: function (e) {
        console.log('获取登录状态失败回调', e);
        wx.setStorage({
            key: 'loginStatus',
            data: false,
        });
        this.setData({
            loginStatus: false
        });
    },
    loginStatusChanged: function (e) {
        console.log('登录状态变更触发的事件回调', e);
        this.getLoginStatus();
    },
    userTaskFetch: function (e) {
        var _a;
        console.log('拉取用户任务回调', e);
        this.setData({
            taskCount: (_a = e.detail.count) !== null && _a !== void 0 ? _a : 0
        });
    },
    onTapNavigateBtn: function (e) {
        console.log('点击跳转按钮事件为:', e);
        if (this.data.loginStatus == false) {
            console.log('登录状态为 false,直接忽略');
            wx.showLoading({
                title: '请先登录',
            });
            setTimeout(function () {
                wx.hideLoading();
            }, 2000);
            return;
        }
        wx.navigateTo({
            url: e.target.dataset.path,
        });
    },
    onNavigatorToTaskPool: function () {
        if (this.data.loginStatus == false) {
            console.log('登录状态为 false,直接忽略');
        }
        else {
            wx.navigateTo({
                url: '/pages/task_list/task_list',
            });
        }
    },
    onNavigatorToMyTask: function () {
        if (this.data.loginStatus == false) {
            console.log('登录状态为 false,直接忽略');
            return;
        }
        wx.navigateTo({
            url: '/pages/user_task_list/user_task_list',
        });
    },
    buttonStart: function (e) {
        startPoint = e.touches[0];
    },
    buttonMove: function (e) {
        var endPoint = e.touches[e.touches.length - 1];
        var translateX = endPoint.clientX - startPoint.clientX;
        var translateY = endPoint.clientY - startPoint.clientY;
        startPoint = endPoint;
        var buttonTop = this.data.buttonTop + translateY;
        var buttonLeft = this.data.buttonLeft + translateX;
        if (buttonLeft + 50 >= this.data.windowWidth) {
            buttonLeft = this.data.windowWidth - 50;
        }
        if (buttonLeft <= 0) {
            buttonLeft = 0;
        }
        if (buttonTop <= 0) {
            buttonTop = 0;
        }
        if (buttonTop + 50 >= this.data.windowHeight) {
            buttonTop = this.data.windowHeight - 50;
        }
        this.setData({
            buttonTop: buttonTop,
            buttonLeft: buttonLeft
        });
    },
    buttonEnd: function (e) {
        console.log("移动结束", e);
        var buttonLeft = this.data.buttonLeft;
        if (buttonLeft >= this.data.windowWidth / 2) {
            buttonLeft = this.data.windowWidth - 50;
        }
        if (buttonLeft < this.data.windowWidth / 2) {
            buttonLeft = 0;
        }
        this.setData({
            buttonLeft: buttonLeft
        });
    },
});
//# sourceMappingURL=data:application/json;base64,