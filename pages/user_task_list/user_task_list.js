"use strict";
var api = require('../../utils/request/api');
var CONFIRM_USER_TASK = 1;
var CANCEL_USR_TASK = 2;
Page({
    data: {
        addflag: true,
        addimg: '../../images/activity_add.png',
        searchstr: '',
        listData: new Array(),
        hiddenModalPut: true,
        activeTask: {
            id: 0,
            name: '',
            detail: '',
            process: {},
            showMore: false,
            avatar: '',
            createdAt: '',
            taskID: 0,
        },
        updateDetail: '',
        existDetails: new Array(),
        buttons: [{ text: '取消', index: CANCEL_USR_TASK }, { text: '确定', index: CONFIRM_USER_TASK }],
        radioItems: [
            { name: '未完成', value: 'UNDONE' },
            { name: '完成', value: 'COMPLETED', checked: true },
        ],
    },
    onLoad: function () {
        this.loadData();
    },
    onShow: function () {
    },
    tap: function (e) {
        console.log(e);
    },
    addhandle: function () {
        console.log('触发搜索框右侧事件');
    },
    searchList: function (ev) {
        var e = ev.detail;
        this.setData({
            searchstr: e.detail.value
        });
    },
    endsearchList: function (e) {
        console.log('查询数据', e);
    },
    cancelsearch: function () {
        this.setData({
            searchstr: ''
        });
    },
    activity_clear: function (e) {
        console.log(e);
        this.setData({
            searchstr: ''
        });
    },
    loadData: function () {
        var _this = this;
        api.userTaskList({}).then(function (res) {
            var _a;
            console.log(res);
            var list = new Array();
            for (var index = 0; index < res.data.length; index++) {
                var element = res.data[index];
                list.push({
                    id: element.id,
                    name: element.name,
                    detail: element.detail,
                    process: {
                        id: element.process.id,
                        detail: element.process.detail,
                        completed: false,
                        details: (_a = element.process.details) !== null && _a !== void 0 ? _a : [],
                    },
                    showMore: false,
                    avatar: element.owner ? element.owner.avatar : 'none',
                    createdAt: element.created_at,
                    taskID: element.task_id
                });
            }
            console.log('赋值完成的 list 为:', list);
            _this.setData({
                listData: list
            });
        });
    },
    tapTaskItem: function (e) {
        console.log('点击了任务卡片,事件为:', e);
        var listData = this.data.listData;
        for (var index = 0; index < listData.length; index++) {
            var element = listData[index];
            if (e.currentTarget.dataset.itemId == element.id) {
                listData[index].showMore = !element.showMore;
            }
        }
        this.setData({
            listData: listData,
        });
    },
    onRightBtnTap: function (e) {
        console.log('点击右边的按钮事件并且被 catch', e);
        this.setData({
            activeTask: e.currentTarget.dataset.item,
            hiddenModalPut: !this.data.hiddenModalPut,
            existDetails: e.currentTarget.dataset.item.process.details
        });
    },
    cancel: function () {
        this.setData({
            hiddenModalPut: true
        });
    },
    confirm: function () {
        this.setData({
            hiddenModalPut: true
        });
    },
    textInput: function (e) {
        console.log('当前文本输入的事件为:', e);
        this.setData({
            updateDetail: e.detail.value
        });
    },
    tapDialogButton: function (e) {
        var _this = this;
        console.log('传入的事件为:', e);
        if (e.detail.item.index == CONFIRM_USER_TASK) {
            console.log('当前页面数据为:', this.data.activeTask);
            console.log('当前的 detail 数据为:', this.data.updateDetail);
            api.updateProcess({
                process_id: this.data.activeTask.process.id,
                detail: this.data.updateDetail,
                completed: 1,
            }).then(function (res) {
                console.log('更新用户任务细节返回结果为::', res);
                _this.setData({
                    hiddenModalPut: true
                });
                _this.loadData();
            }).catch(function (err) {
                console.log('更新用户任务细节失败,结果为:', err);
                _this.setData({
                    hiddenModalPut: true
                });
            });
        }
        else if (e.detail.item.index == CANCEL_USR_TASK) {
            this.setData({
                hiddenModalPut: true
            });
        }
    },
    radioChange: function (e) {
        console.log('点击了切换按钮');
        var items = this.data.radioItems;
        for (var i = 0; i < items.length; ++i) {
            items[i].checked = items[i].value == e.detail.value;
        }
        console.log(items);
        this.setData({
            radioItems: items
        });
    },
});
//# sourceMappingURL=data:application/json;base64,